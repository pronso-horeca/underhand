// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: azVx9DM13tZbR2SGxpPJBW
// Component: WybYbYmXYd
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import NavItem from "../../NavItem" // plasmic-import: 6Hw2GdZg4E/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen" // plasmic-import: MpD2J1nj9GPB/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_underhand.module.css" // plasmic-import: azVx9DM13tZbR2SGxpPJBW/projectcss
import * as sty from "./PlasmicSection.module.css" // plasmic-import: WybYbYmXYd/css

export type PlasmicSection__VariantMembers = {}

export type PlasmicSection__VariantsArgs = {}
type VariantPropType = keyof PlasmicSection__VariantsArgs
export const PlasmicSection__VariantProps = new Array<VariantPropType>()

export type PlasmicSection__ArgsType = {
  thumbnail?: React.ReactNode
  content?: React.ReactNode
  contentFooter?: React.ReactNode
  title?: React.ReactNode
  title2?: React.ReactNode
}

type ArgPropType = keyof PlasmicSection__ArgsType
export const PlasmicSection__ArgProps = new Array<ArgPropType>(
  "thumbnail",
  "content",
  "contentFooter",
  "title",
  "title2"
)

export type PlasmicSection__OverridesType = {
  root?: p.Flex<"div">
  thumbnail?: p.Flex<"div">
  content?: p.Flex<"div">
  freeBox?: p.Flex<"div">
}

export interface DefaultSectionProps {
  thumbnail?: React.ReactNode
  content?: React.ReactNode
  contentFooter?: React.ReactNode
  title?: React.ReactNode
  title2?: React.ReactNode
  className?: string
}

function PlasmicSection__RenderFunc(props: {
  variants: PlasmicSection__VariantsArgs
  args: PlasmicSection__ArgsType
  overrides: PlasmicSection__OverridesType
  dataFetches?: PlasmicSection__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  })

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {(
        hasVariant(globalVariants, "screen", "lg")
          ? false
          : hasVariant(globalVariants, "screen", "sm")
          ? true
          : true
      ) ? (
        <h2 className={classNames(defaultcss.h2, sty.h2__i3Dbg)}>
          {p.renderPlasmicSlot({
            defaultContents: "Коктейлі",
            value: args.title,
            className: classNames(sty.slotTargetTitle),
          })}
        </h2>
      ) : null}

      <div
        data-plasmic-name={"thumbnail"}
        data-plasmic-override={overrides.thumbnail}
        className={classNames(defaultcss.all, sty.thumbnail)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__tpbbf)}
            />
          ),

          value: args.thumbnail,
        })}
      </div>

      {(hasVariant(globalVariants, "screen", "md") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          hasGap={true}
          className={classNames(defaultcss.all, sty.content)}
        >
          {false ? (
            <h2 className={classNames(defaultcss.h2, sty.h2__uKNu)}>
              {p.renderPlasmicSlot({
                defaultContents: "Коктейлі",
                value: args.title2,
                className: classNames(sty.slotTargetTitle2),
              })}
            </h2>
          ) : null}
          {p.renderPlasmicSlot({
            defaultContents:
              "Наші коктейлі смачні — всім зрозуміло і це легко перевірити.\n\nАле мало хто знає про коктейлі стільки як наші майстри — в цьому наша унікальність — \nти п’єш коктейль і дізнаєшся його історію. \n\nПрийти в Underhand — дізнатись щось нове про себе через призму цікавого поєднання смаків твого персонального коктейля — бармен розуміє вас і знає, що тобі потрібно саме зараз",
            value: args.content,
            className: classNames(sty.slotTargetContent),
          })}

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(defaultcss.all, sty.freeBox)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <NavItem
                    icon={null}
                    label={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__iz0Sv
                        )}
                      >
                        {"більше про коктейлі"}
                      </div>
                    }
                  />

                  <NavItem
                    className={classNames(
                      "__wab_instance",
                      sty.navItem___4XYlg
                    )}
                    icon={null}
                    label={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__wvkR
                        )}
                      >
                        {"меню"}
                      </div>
                    }
                  />
                </React.Fragment>
              ),
              value: args.contentFooter,
            })}
          </div>
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "thumbnail", "content", "freeBox"],
  thumbnail: ["thumbnail"],
  content: ["content", "freeBox"],
  freeBox: ["freeBox"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  thumbnail: "div"
  content: "div"
  freeBox: "div"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSection__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSection__VariantsArgs
    args?: PlasmicSection__ArgsType
    overrides?: NodeOverridesType<T>
    dataFetches?: PlasmicSection__Fetches
  } & Omit<PlasmicSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSection__ArgProps,
      internalVariantPropNames: PlasmicSection__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicSection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicSection"
  } else {
    func.displayName = `PlasmicSection.${nodeName}`
  }
  return func
}

export const PlasmicSection = Object.assign(
  // Top-level PlasmicSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    thumbnail: makeNodeComponent("thumbnail"),
    content: makeNodeComponent("content"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicSection
    internalVariantProps: PlasmicSection__VariantProps,
    internalArgProps: PlasmicSection__ArgProps,
  }
)

export default PlasmicSection
/* prettier-ignore-end */
