// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: azVx9DM13tZbR2SGxpPJBW
// Component: 6Hw2GdZg4E
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen" // plasmic-import: MpD2J1nj9GPB/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_underhand.module.css" // plasmic-import: azVx9DM13tZbR2SGxpPJBW/projectcss
import * as sty from "./PlasmicNavItem.module.css" // plasmic-import: 6Hw2GdZg4E/css

import MenuIcon from "./icons/PlasmicIcon__Menu" // plasmic-import: pjGKTN-7w/icon

export type PlasmicNavItem__VariantMembers = {}

export type PlasmicNavItem__VariantsArgs = {}
type VariantPropType = keyof PlasmicNavItem__VariantsArgs
export const PlasmicNavItem__VariantProps = new Array<VariantPropType>()

export type PlasmicNavItem__ArgsType = {
  label?: React.ReactNode
  icon?: React.ReactNode
  destination?: string | PageHref
}

type ArgPropType = keyof PlasmicNavItem__ArgsType
export const PlasmicNavItem__ArgProps = new Array<ArgPropType>(
  "label",
  "icon",
  "destination"
)

export type PlasmicNavItem__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>
  freeBox?: p.Flex<"div">
}

export interface DefaultNavItemProps {
  label?: React.ReactNode
  icon?: React.ReactNode
  destination?: string | PageHref
  className?: string
}

function PlasmicNavItem__RenderFunc(props: {
  variants: PlasmicNavItem__VariantsArgs
  args: PlasmicNavItem__ArgsType
  overrides: PlasmicNavItem__OverridesType
  dataFetches?: PlasmicNavItem__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  })

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.a, projectcss.root_reset, sty.root)}
      component={Link}
      href={args.destination}
      platform={"gatsby"}
    >
      {p.renderPlasmicSlot({
        defaultContents: "напої та їжа",
        value: args.label,
        className: classNames(sty.slotTargetLabel),
      })}

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <MenuIcon
              className={classNames(defaultcss.all, sty.svg__kyzOj)}
              role={"img"}
            />
          ),

          value: args.icon,
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "a"
  freeBox: "div"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavItem__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavItem__VariantsArgs
    args?: PlasmicNavItem__ArgsType
    overrides?: NodeOverridesType<T>
    dataFetches?: PlasmicNavItem__Fetches
  } & Omit<PlasmicNavItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavItem__ArgProps,
      internalVariantPropNames: PlasmicNavItem__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicNavItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicNavItem"
  } else {
    func.displayName = `PlasmicNavItem.${nodeName}`
  }
  return func
}

export const PlasmicNavItem = Object.assign(
  // Top-level PlasmicNavItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicNavItem
    internalVariantProps: PlasmicNavItem__VariantProps,
    internalArgProps: PlasmicNavItem__ArgProps,
  }
)

export default PlasmicNavItem
/* prettier-ignore-end */
