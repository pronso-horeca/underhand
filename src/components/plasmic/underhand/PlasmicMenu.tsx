// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: azVx9DM13tZbR2SGxpPJBW
// Component: KLJ3eYMzM6
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Header from "../../Header" // plasmic-import: RwQZi7eZFd/component

import { LanguageValue, useLanguage } from "./PlasmicGlobalVariant__Language" // plasmic-import: IK06cfUF8p/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_underhand.module.css" // plasmic-import: azVx9DM13tZbR2SGxpPJBW/projectcss
import * as sty from "./PlasmicMenu.module.css" // plasmic-import: KLJ3eYMzM6/css

import menuCocktailsjpegUqpZ4PPfT from "./images/menuCocktailsjpeg.jpeg" // plasmic-import: uqpZ4PPfT/picture
import menuFoodpngT7I5RL0Yq from "./images/menuFoodpng.png" // plasmic-import: T7i5rL0yq/picture
import menuBurgersjpegIbfisg1JD from "./images/menuBurgersjpeg.jpeg" // plasmic-import: IBFISG1jD/picture
import menuDrinks1JpgLdhYiUuyT from "./images/menuDrinks1Jpg.jpeg" // plasmic-import: LDHYiUuyT/picture
import menuDrinks2Png4KeBbr4D9 from "./images/menuDrinks2Png.png" // plasmic-import: 4KEBbr4d9/picture

export type PlasmicMenu__VariantMembers = {}

export type PlasmicMenu__VariantsArgs = {}
type VariantPropType = keyof PlasmicMenu__VariantsArgs
export const PlasmicMenu__VariantProps = new Array<VariantPropType>()

export type PlasmicMenu__ArgsType = {}
type ArgPropType = keyof PlasmicMenu__ArgsType
export const PlasmicMenu__ArgProps = new Array<ArgPropType>()

export type PlasmicMenu__OverridesType = {
  root?: p.Flex<"div">
  header?: p.Flex<typeof Header>
  freeBox?: p.Flex<"div">
}

export interface DefaultMenuProps {
  className?: string
}

function PlasmicMenu__RenderFunc(props: {
  variants: PlasmicMenu__VariantsArgs
  args: PlasmicMenu__ArgsType
  overrides: PlasmicMenu__OverridesType
  dataFetches?: PlasmicMenu__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  const globalVariants = ensureGlobalVariants({
    language: useLanguage(),
  })

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            {
              [sty.root__global_language_en]: hasVariant(
                globalVariants,
                "language",
                "en"
              ),
              [sty.root__global_language_ru]: hasVariant(
                globalVariants,
                "language",
                "ru"
              ),
            }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(defaultcss.all, sty.freeBox)}
          >
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__oiYye)}
              src={menuCocktailsjpegUqpZ4PPfT}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__qAnuZ)}
              src={menuFoodpngT7I5RL0Yq}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__qMQtF)}
              src={menuBurgersjpegIbfisg1JD}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__hXuGt)}
              src={menuDrinks1JpgLdhYiUuyT}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img___6KXgK)}
              src={menuDrinks2Png4KeBbr4D9}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "header", "freeBox"],
  header: ["header"],
  freeBox: ["freeBox"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  header: typeof Header
  freeBox: "div"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenu__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenu__VariantsArgs
    args?: PlasmicMenu__ArgsType
    overrides?: NodeOverridesType<T>
    dataFetches?: PlasmicMenu__Fetches
  } & Omit<PlasmicMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMenu__ArgProps,
      internalVariantPropNames: PlasmicMenu__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicMenu__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicMenu"
  } else {
    func.displayName = `PlasmicMenu.${nodeName}`
  }
  return func
}

export const PlasmicMenu = Object.assign(
  // Top-level PlasmicMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicMenu
    internalVariantProps: PlasmicMenu__VariantProps,
    internalArgProps: PlasmicMenu__ArgProps,
  }
)

export default PlasmicMenu
/* prettier-ignore-end */
