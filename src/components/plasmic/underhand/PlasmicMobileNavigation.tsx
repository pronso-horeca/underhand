// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: azVx9DM13tZbR2SGxpPJBW
// Component: QxisHOJ3lBN
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import NavItem from "../../NavItem" // plasmic-import: 6Hw2GdZg4E/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen" // plasmic-import: MpD2J1nj9GPB/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_underhand.module.css" // plasmic-import: azVx9DM13tZbR2SGxpPJBW/projectcss
import * as sty from "./PlasmicMobileNavigation.module.css" // plasmic-import: QxisHOJ3lBN/css

import MenusvgIcon from "./icons/PlasmicIcon__Menusvg" // plasmic-import: X92WVhKAn/icon
import WhiskeysvgIcon from "./icons/PlasmicIcon__Whiskeysvg" // plasmic-import: iw-Wt1o3f/icon
import TraysvgIcon from "./icons/PlasmicIcon__Traysvg" // plasmic-import: Dy0n5Dy_a/icon
import TeamsvgIcon from "./icons/PlasmicIcon__Teamsvg" // plasmic-import: rmynkbPIN/icon
import LocationIcon from "./icons/PlasmicIcon__Location" // plasmic-import: cBPVv-cl4/icon
import namtrebaBurgersLogoEnYzwnINd from "./images/namtrebaBurgersLogo.png" // plasmic-import: ENYzwnINd/picture

export type PlasmicMobileNavigation__VariantMembers = {}

export type PlasmicMobileNavigation__VariantsArgs = {}
type VariantPropType = keyof PlasmicMobileNavigation__VariantsArgs
export const PlasmicMobileNavigation__VariantProps =
  new Array<VariantPropType>()

export type PlasmicMobileNavigation__ArgsType = {}
type ArgPropType = keyof PlasmicMobileNavigation__ArgsType
export const PlasmicMobileNavigation__ArgProps = new Array<ArgPropType>()

export type PlasmicMobileNavigation__OverridesType = {
  root?: p.Flex<"div">
  menu?: p.Flex<typeof NavItem>
  menu3?: p.Flex<typeof NavItem>
  label3?: p.Flex<"div">
  menu4?: p.Flex<typeof NavItem>
  book?: p.Flex<typeof NavItem>
  delivery?: p.Flex<typeof NavItem>
  img?: p.Flex<"img">
  contacts?: p.Flex<typeof NavItem>
}

export interface DefaultMobileNavigationProps {
  className?: string
}

function PlasmicMobileNavigation__RenderFunc(props: {
  variants: PlasmicMobileNavigation__VariantsArgs
  args: PlasmicMobileNavigation__ArgsType
  overrides: PlasmicMobileNavigation__OverridesType
  dataFetches?: PlasmicMobileNavigation__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  })

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      >
        <NavItem
          data-plasmic-name={"menu"}
          data-plasmic-override={overrides.menu}
          className={classNames("__wab_instance", sty.menu)}
          destination={"/menu" as const}
          icon={
            <MenusvgIcon
              className={classNames(defaultcss.all, sty.svg__ipOM)}
              role={"img"}
            />
          }
          label={"Меню"}
        />

        {false ? (
          <NavItem
            data-plasmic-name={"menu3"}
            data-plasmic-override={overrides.menu3}
            className={classNames("__wab_instance", sty.menu3)}
            icon={
              <WhiskeysvgIcon
                className={classNames(defaultcss.all, sty.svg___7Yi0B)}
                role={"img"}
              />
            }
            label={
              <div
                data-plasmic-name={"label3"}
                data-plasmic-override={overrides.label3}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.label3
                )}
              >
                {"про Коктейлі"}
              </div>
            }
          />
        ) : null}
        {false ? (
          <NavItem
            data-plasmic-name={"menu4"}
            data-plasmic-override={overrides.menu4}
            className={classNames("__wab_instance", sty.menu4)}
            icon={
              <TraysvgIcon
                className={classNames(defaultcss.all, sty.svg__sY4J)}
                role={"img"}
              />
            }
            label={
              (hasVariant(globalVariants, "screen", "xl") ? true : true) ? (
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__vsyTl
                  )}
                >
                  {hasVariant(globalVariants, "screen", "xl")
                    ? "про Страви"
                    : "про Страви"}
                </div>
              ) : null
            }
          />
        ) : null}
        {false ? (
          <NavItem
            data-plasmic-name={"book"}
            data-plasmic-override={overrides.book}
            className={classNames("__wab_instance", sty.book)}
            icon={
              <TeamsvgIcon
                className={classNames(defaultcss.all, sty.svg__pl9W7)}
                role={"img"}
              />
            }
            label={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__pxjcM
                )}
              >
                {"команда pronso"}
              </div>
            }
          />
        ) : null}
        {false ? (
          <NavItem
            data-plasmic-name={"delivery"}
            data-plasmic-override={overrides.delivery}
            className={classNames("__wab_instance", sty.delivery)}
            icon={
              <img
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(defaultcss.img, sty.img)}
                src={namtrebaBurgersLogoEnYzwnINd}
              />
            }
            label={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__lyHqP
                )}
              >
                {"доставка «нам треба»"}
              </div>
            }
          />
        ) : null}

        <NavItem
          data-plasmic-name={"contacts"}
          data-plasmic-override={overrides.contacts}
          className={classNames("__wab_instance", sty.contacts)}
          destination={"#contacts" as const}
          icon={
            <LocationIcon
              className={classNames(defaultcss.all, sty.svg__uOiSa)}
              role={"img"}
            />
          }
          label={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__pjf6L
              )}
            >
              {"локація і Контакти"}
            </div>
          }
        />
      </p.Stack>
    ) : null
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: [
    "root",
    "menu",
    "menu3",
    "label3",
    "menu4",
    "book",
    "delivery",
    "img",
    "contacts",
  ],
  menu: ["menu"],
  menu3: ["menu3", "label3"],
  label3: ["label3"],
  menu4: ["menu4"],
  book: ["book"],
  delivery: ["delivery", "img"],
  img: ["img"],
  contacts: ["contacts"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  menu: typeof NavItem
  menu3: typeof NavItem
  label3: "div"
  menu4: typeof NavItem
  book: typeof NavItem
  delivery: typeof NavItem
  img: "img"
  contacts: typeof NavItem
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMobileNavigation__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMobileNavigation__VariantsArgs
    args?: PlasmicMobileNavigation__ArgsType
    overrides?: NodeOverridesType<T>
    dataFetches?: PlasmicMobileNavigation__Fetches
  } & Omit<PlasmicMobileNavigation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMobileNavigation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMobileNavigation__ArgProps,
      internalVariantPropNames: PlasmicMobileNavigation__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicMobileNavigation__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicMobileNavigation"
  } else {
    func.displayName = `PlasmicMobileNavigation.${nodeName}`
  }
  return func
}

export const PlasmicMobileNavigation = Object.assign(
  // Top-level PlasmicMobileNavigation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menu: makeNodeComponent("menu"),
    menu3: makeNodeComponent("menu3"),
    label3: makeNodeComponent("label3"),
    menu4: makeNodeComponent("menu4"),
    book: makeNodeComponent("book"),
    delivery: makeNodeComponent("delivery"),
    img: makeNodeComponent("img"),
    contacts: makeNodeComponent("contacts"),

    // Metadata about props expected for PlasmicMobileNavigation
    internalVariantProps: PlasmicMobileNavigation__VariantProps,
    internalArgProps: PlasmicMobileNavigation__ArgProps,
  }
)

export default PlasmicMobileNavigation
/* prettier-ignore-end */
